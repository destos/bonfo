[tool]
[tool.poetry]
name = "bonfo"
version = "0.1.0"
homepage = "https://github.com/destos/bonfo"
repository = "https://github.com/destos/bonfo"
documentation = "https://destos.github.io/bonfo"
description = "Multiwii flight controller configuration management"
authors = ["Patrick Forringer <patrick@forringer.com>"]
readme = "README.md"
license =  "MIT"
classifiers=[
    "Development Status :: 2 - Pre-Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
packages = [
    { include = "bonfo" },
    { include = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
pyserial = "^3.5"
pyserial-asyncio = "^0.6"
dataclass-wizard = "^0.22"
construct = "^2.10"
construct-typing = "^0"
arrow = "^1.2.2"
semver = "^2.13.0"
click = { version = "^8.0", extras = ["cli"] }
rich = { version = "^12.0", extras = ["cli"] }
rich-click = { version = "^1.2", extras = ["cli"] }
loca = { version = "^2.0", extras = ["cli"] }

black  = { version = "^22.0", optional = true }
isort  = { version = "^5", optional = true }
flake8  = { version = "^3", optional = true }
flake8-docstrings = { version = "^1", optional = true }
mypy = { version = "^0.940", optional = true }
pytest  = { version = "^7", optional = true }
pytest-asyncio = { version = "^0.18.3", optional = true }
pytest-cov  = { version = "^3", optional = true }
pytest-watcher = { version = "^0", optional = true }
pytest-mock = { version = "^3", optional = true }
types-mock = { version = "^4", optional = true }
# types-docutils = { version }
tox  = { version = "^3", optional = true }
virtualenv  = { version = "^20", optional = true }
pip  = { version = "^20", optional = true }
mkdocs  = { version = "^1", optional = true }
mkdocstrings  = { version = "^0", optional = true }
mkdocs-click = { version = "^0", optional = true }
mkdocs-git-revision-date-plugin = { version = "^0", optional = true }
mkdocs-include-markdown-plugin  = { version = "^3", optional = true }
mkdocs-material  = { version = "^8", optional = true }
mkdocs-material-extensions  = { version = "^1", optional = true }
twine  = { version = "^4", optional = true }
mkdocs-autorefs = { version = "^0", optional = true }
pre-commit = { version = "^2", optional = true }
toml = { version = "^0", optional = true }
bump2version = { version = "^1", optional = true }
autoflake8 = { version = "^0", optional = true }
textual = "^0.1.18"

[tool.poetry.extras]
test = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-mock",
    "types-mock",
]

dev = [
    "tox",
    "pre-commit",
    "virtualenv",
    "pip",
    "twine",
    "toml",
    "black",
    "isort",
    "mypy",
    "bump2version",
    "autoflake8",
    "pytest-watcher",
    "flake8",
    "flake8-docstrings",
 ]

doc = [
    "mkdocs",
    "mkdocs-click",
    "mkdocs-material",
    "mkdocs-material-extension",
    "mkdocs-autorefs",
    "mkdocs-include-markdown-plugin",
    "mkdocs-git-revision-date-plugin",
    "mkdocstrings",
]

[tool.poetry.scripts]
bonfo = 'bonfo.cli:main'

[tool.black]
line-length = 120
skip-string-normalization = true
target-version = ["py36", "py37", "py38"]
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
skip_gitignore = true
# you can skip files as below
#skip_glob = docs/conf.py

[tool.autoflake8]
in-place = true
# remove-unused-variables = true
remove-all-unused-imports = true
ignore-init-module-imports = true
recursive = true
verbose = true

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
asyncio_mode = "auto"

[tool.mypy]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "bonfo.cli"
ignore_errors = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
